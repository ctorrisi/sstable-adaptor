buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        //classpath 'com.netflix.nebula:gradle-netflixoss-project-plugin:3.6.2'
        //classpath "com.netflix.nebula:nebula-release-plugin:4.2.0"

        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.2"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3"
    }
}

project.version = '0.2.17.0'
def artifact = new Properties()
artifact.load(new FileInputStream("deploy.properties"))
if (project.hasProperty('version'))
   artifact.version = project.property('version')

//ext.githubProjectName = 'sstable-adaptor'

allprojects {
    //apply plugin: 'nebula.netflixoss'
    apply plugin: "com.jfrog.bintray"
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    
    version = artifact.version
    group = artifact.groupId

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

subprojects {

    repositories {
        jcenter()
    }

    //apply plugin: 'nebula.dependency-lock'
    apply plugin: 'com.github.johnrengelman.shadow'

    configurations.all {
            resolutionStrategy.force "org.slf4j:slf4j-api:${slf4jVersion}"
            resolutionStrategy.force "org.slf4j:slf4j-log4j12:${slf4jVersion}"
            resolutionStrategy.force "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
            resolutionStrategy.force "com.google.guava:guava:${guavaVersion}"
    }


    dependencies {
        //compile "org.slf4j:slf4j-api:latest.release"
        testCompile "junit:junit:4.12"
    }

    javadoc {
        failOnError = false
    }

    tasks.withType(Javadoc) {
       options.addStringOption('Xdoclint:none', '-quiet')
    }

    bintray {
       user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
       key = project.hasProperty('bintrayKey') ? project.property('bintrayKey') : System.getenv('BINTRAY_API_KEY')
       configurations = ['archives']
       publications = ['MyPublication']
       filesSpec {
	      from '**/build/libs'
	      into '.'
       }
       pkg {
         repo = artifact.repo
         name = artifact.id
         userOrg = artifact.userOrg
         licenses = ['Apache-2.0']
         websiteUrl = 'https://github.com/ctorrisi/sstable-adaptor'
         vcsUrl = 'https://github.com/ctorrisi/sstable-adaptor.git'
         publicDownloadNumbers = true
         publish = true
         version {
           name = artifact.version
           desc = 'SSTable reader and writer'
           released  = new Date()
           vcsTag = artifact.version
         }
      }
  }  

  publishing {
     publications {
        MyPublication(MavenPublication) {
            from components.java
            groupId artifact.groupId
            artifactId artifact.id
            version artifact.version
        }
     }
   }
}


project(':sstable-adaptor-cassandra') {

    dependencies {
        //compileOnly 'com.google.code.findbugs:annotations'
        compileOnly "org.antlr:antlr:3.5.2"
        compileOnly "org.xerial.snappy:snappy-java:1.1.1.7"
        compileOnly "net.jpountz.lz4:lz4:1.3.0"
        compileOnly "com.ning:compress-lzf:0.8.4"
        compileOnly "com.google.guava:guava:18.0"
        compileOnly "org.hdrhistogram:HdrHistogram:2.1.9"

        compileOnly "commons-codec:commons-codec:1.9"
        compileOnly "org.apache.commons:commons-lang3:3.1"
        compileOnly "org.apache.commons:commons-math3:3.2"
        compileOnly "com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:1.4"
        compileOnly ('org.apache.cassandra:cassandra-all:3.11.1') {
            exclude group: 'org.slf4j', module: 'log4j-over-slf4j'
        }
        compileOnly "org.slf4j:slf4j-api:1.7.7"
        compileOnly "org.slf4j:jcl-over-slf4j:1.7.7"
        compileOnly "org.codehaus.jackson:jackson-core-asl:1.9.13"
        compileOnly "org.codehaus.jackson:jackson-mapper-asl:1.9.13"
        compileOnly "com.googlecode.json-simple:json-simple:1.1"
        compileOnly "com.boundary:high-scale-lib:1.0.6"
        compileOnly "com.github.jbellis:jamm:0.3.0"
        compileOnly "org.jboss.byteman:byteman:3.0.3"
        compileOnly "org.jboss.byteman:byteman-submit:3.0.3"
        compileOnly "org.jboss.byteman:byteman-bmunit:3.0.3"
        compileOnly "org.openjdk.jmh:jmh-core:1.1.1"
        compileOnly "org.openjdk.jmh:jmh-generator-annprocess:1.1.1"
        compileOnly "io.dropwizard.metrics:metrics-core:3.1.0"
        compileOnly "io.dropwizard.metrics:metrics-jvm:3.1.0"
        compileOnly "com.addthis.metrics:reporter-config3:3.0.3"
        compileOnly "org.mindrot:jbcrypt:0.3m"
        compileOnly "io.airlift:airline:0.6"
        compileOnly "io.netty:netty-all:4.0.44.Final"
        compileOnly "com.clearspring.analytics:stream:2.5.2"
        compileOnly "org.eclipse.jdt.core.compiler:ecj:4.4.2"
        compileOnly "org.caffinitas.ohc:ohc-core:0.4.4"
        compileOnly "org.caffinitas.ohc:ohc-core-j8:0.4.4"
        compileOnly "net.ju-n.compile-command-annotations:compile-command-annotations:1.2.0"
        compileOnly ("org.fusesource:sigar:1.6.4") {
            exclude group: "log4j", module: "log4j"
        }
        compileOnly "joda-time:joda-time:2.4"
        compileOnly "com.carrotsearch:hppc:0.5.4"
        compileOnly "de.jflex:jflex:1.6.0"
        compileOnly "com.github.rholder:snowball-stemmer:1.3.0.581.1"
        compileOnly "com.googlecode.concurrent-trees:concurrent-trees:2.4.0"
        compileOnly "com.github.ben-manes.caffeine:caffeine:2.3.5"
        compileOnly "org.jctools:jctools-core:1.2.1"
        compileOnly "org.apache.hadoop:hadoop-common:2.7.3"

        testCompile 'junit:junit:4.12'
    }

    shadowJar {
        zip64 true
        from(project.sourceSets.main.output)

        baseName = 'sstable-adaptor-cassandra'
        classifier = 'shadow'
        configurations = [project.configurations.runtime]

        relocate 'org.apache.cassandra', 'shadow.org.apache.cassandra'
    }

    artifacts {
        archives shadowJar
    }
}


project(':sstable-adaptor-core') {
    dependencies {
        compile project(':sstable-adaptor-cassandra')
        compile "org.apache.hadoop:hadoop-common:${hadoopVersion}"
        compile "org.apache.hadoop:hadoop-aws:${hadoopVersion}"

        compile "org.joda:joda-convert:${jodaVersion}"
        compile "org.slf4j:slf4j-api:${slf4jVersion}"
        compile "org.slf4j:slf4j-log4j12:${slf4jVersion}"
        compile "log4j:log4j:${log4jVersion}"
        compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
        compile "org.codehaus.jackson:jackson-core-asl:1.9.13"
        compile "org.codehaus.jackson:jackson-mapper-asl:1.9.13"

        testCompile "junit:junit:4.12"
        testCompile "junit:junit-dep:${junitVersion}"
        testCompile "com.novocode:junit-interface:${junitInterfaceVersion}"
        testCompile "org.reflections:reflections:0.9.11"
        testCompile "org.pegdown:pegdown:${pegdownVersion}" // For creating test report pages.
    }

    shadowJar {
        zip64 true
        from(project.sourceSets.main.output)
        configurations = [project.configurations.runtime]
        archiveName = "standalone-runner.jar"

        dependencies {
            exclude(dependency("cglib:.*"))
            exclude(dependency("com.addthis.metrics:.*"))
            exclude(dependency("com.codahale.metrics:.*"))
            exclude(dependency("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"))
            exclude(dependency("com.google.code.gson:.*"))
            exclude(dependency("com.google.protobuf:.*"))
            exclude(dependency("com.jcraft:.*"))
            exclude(dependency("com.ning:.*"))
            exclude(dependency("com.sun.jersey:.*"))
            exclude(dependency("com.univocity:.*"))
            exclude(dependency("io.dropwizard.metrics:.*"))
            //exclude(dependency("io.netty:.*"))
            exclude(dependency("javax.servlet:.*"))
            exclude(dependency("javax.servlet.jsp:.*"))
            exclude(dependency("javax.ws.rs:.*"))
            exclude(dependency("net.java.dev.jets3t:.*"))
            exclude(dependency("org.antlr:.*"))
            exclude(dependency("org.apache.avro:.*"))
            exclude(dependency("org.apache.curator:.*"))
            exclude(dependency("org.apache.ivy:.*"))
            exclude(dependency("org.apache.htrace:.*"))
            //exclude(dependency("org.apache.hadoop:.*"))
            //exclude(dependency("org.apache.mesos:.*"))
            //exclude(dependency("org.apache.spark:.*"))
            exclude(dependency("org.apache.xbean:.*"))
            exclude(dependency("org.apache.zookeeper:.*"))
            exclude(dependency("org.codehaus.jackson:.*"))
            exclude(dependency("org.codehaus.janino:.*"))
            exclude(dependency("org.glassfish.jersey.media:jersey-media-jaxb:.*"))
            exclude(dependency("org.glassfish.jersey.core:.*"))
            exclude(dependency("org.glassfish.jersey.containers:.*"))
            exclude(dependency("org.jacoco:.*"))
            exclude(dependency("org.json4s:.*"))
            exclude(dependency("org.mortbay.jetty:.*"))
            exclude(dependency("org.openjdk.jmh:.*"))
            exclude(dependency("org.roaringbitmap:.*"))
            exclude(dependency("oro:.*"))
            exclude(dependency("net.razorvine:.*"))
            exclude(dependency("net.sf.py4j:.*"))
        }

        //relocate 'com.google', 'shadow.com.google'
    }
}
